Program([
	FuncDecl(product, AutoType, [Param(x, IntegerType), Param(y, IntegerType)], None, BlockStmt([ReturnStmt(BinExpr(*, Id(x), Id(y)))]))
	FuncDecl(productArray, AutoType, [Param(numRows, IntegerType), Param(numCols, IntegerType)], None, BlockStmt([VarDecl(result, IntegerType, IntegerLit(1)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), Id(numRows)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([ForStmt(AssignStmt(Id(j), IntegerLit(0)), BinExpr(<, Id(j), Id(numCols)), BinExpr(+, Id(j), IntegerLit(1)), BlockStmt([AssignStmt(Id(result), FuncCall(product, [Id(result), ArrayCell(arr, [Id(i)])]))]))])), ReturnStmt(Id(result))]))
	FuncDecl(bubbleSort, VoidType, [Param(numRows, IntegerType), Param(numCols, IntegerType)], None, BlockStmt([ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), BinExpr(-, Id(numRows), IntegerLit(1))), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([ForStmt(AssignStmt(Id(j), IntegerLit(0)), BinExpr(<, Id(j), BinExpr(-, BinExpr(-, Id(numCols), Id(i)), IntegerLit(1))), BinExpr(+, Id(j), IntegerLit(1)), BlockStmt([IfStmt(BinExpr(>, ArrayCell(arr, [IntegerLit(0)]), ArrayCell(arr, [IntegerLit(0)])), BlockStmt([ForStmt(AssignStmt(Id(k), IntegerLit(0)), BinExpr(<, Id(k), Id(numRows)), BinExpr(+, Id(k), IntegerLit(1)), BlockStmt([VarDecl(temp, IntegerType, ArrayCell(arr, [Id(k)])), AssignStmt(ArrayCell(arr, [Id(k)]), ArrayCell(arr, [Id(k)])), AssignStmt(ArrayCell(arr, [Id(k)]), Id(temp))]))]))]))]))]))
	FuncDecl(main, VoidType, [], None, BlockStmt([VarDecl(arr, ArrayType([5, 4], IntegerType)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(5)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([ForStmt(AssignStmt(Id(j), IntegerLit(0)), BinExpr(<, Id(j), IntegerLit(4)), BinExpr(+, Id(j), IntegerLit(1)), BlockStmt([AssignStmt(ArrayCell(arr, [Id(i)]), FuncCall(rand, [IntegerLit(1), IntegerLit(10)]))]))])), CallStmt(printf, StringLit(The array is:\n)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(5)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([ForStmt(AssignStmt(Id(j), IntegerLit(0)), BinExpr(<, Id(j), IntegerLit(4)), BinExpr(+, Id(j), IntegerLit(1)), BlockStmt([CallStmt(printf, StringLit(%d ), ArrayCell(arr, [Id(i)]))])), CallStmt(printf, StringLit(\n))])), VarDecl(sum, IntegerType, IntegerLit(0)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(5)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([AssignStmt(Id(sum), BinExpr(+, Id(sum), ArrayCell(arr, [Id(i)])))])), CallStmt(printf, StringLit(The sum of the second column is %d.\n), Id(sum)), VarDecl(productAll, IntegerType, FuncCall(productArray, [Id(arr), IntegerLit(5), IntegerLit(4)])), CallStmt(printf, StringLit(The product of all numbers in the array is %d.\n), Id(productAll)), CallStmt(bubbleSort, Id(arr), IntegerLit(5), IntegerLit(4)), CallStmt(printf, StringLit(The sorted array is:\n)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(5)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([ForStmt(AssignStmt(Id(j), IntegerLit(0)), BinExpr(<, Id(j), IntegerLit(4)), BinExpr(+, Id(j), IntegerLit(1)), BlockStmt([CallStmt(printf, StringLit(%d ), ArrayCell(arr, [Id(i)]))])), CallStmt(printf, StringLit(\n))]))]))
])