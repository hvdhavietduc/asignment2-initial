Program([
	VarDecl(a, BooleanType, BooleanLit(True))
	FuncDecl(sum, AutoType, [Param(x, IntegerType), Param(y, IntegerType)], None, BlockStmt([ReturnStmt(BinExpr(+, Id(x), Id(y)))]))
	FuncDecl(prod, AutoType, [Param(x, FloatType), Param(y, FloatType)], None, BlockStmt([ReturnStmt(BinExpr(*, Id(x), Id(y)))]))
	FuncDecl(main, VoidType, [], None, BlockStmt([VarDecl(i, IntegerType, IntegerLit(0)), VarDecl(j, IntegerType, IntegerLit(0)), WhileStmt(BinExpr(<, BinExpr(*, Id(i), Id(i)), IntegerLit(100)), BlockStmt([AssignStmt(Id(i), BinExpr(+, Id(i), IntegerLit(1)))])), CallStmt(printf, StringLit(The smallest integer whose square is greater than or equal to 100 is %d\n), Id(i)), AssignStmt(Id(j), IntegerLit(10)), DoWhileStmt(BinExpr(>, Id(j), IntegerLit(0)), BlockStmt([CallStmt(printf, StringLit(%d\n), Id(j)), AssignStmt(Id(j), BinExpr(-, Id(j), IntegerLit(1)))])), VarDecl(total, IntegerType, IntegerLit(0)), ForStmt(AssignStmt(Id(i), IntegerLit(1)), BinExpr(<=, Id(i), IntegerLit(10)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([AssignStmt(Id(total), FuncCall(sum, [Id(total), Id(i)]))])), CallStmt(printf, StringLit(The sum of the numbers from 1 to 10 is %d\n), Id(total)), IfStmt(BinExpr(>, Id(b), FloatLit(3.0)), BlockStmt([CallStmt(printf, StringLit(b is greater than 3.0\n))]), BlockStmt([CallStmt(printf, StringLit(b is less than or equal to 3.0\n))])), VarDecl(product, FloatType, FloatLit(1.0)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(2)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([ForStmt(AssignStmt(Id(j), IntegerLit(0)), BinExpr(<, Id(j), IntegerLit(3)), BinExpr(+, Id(j), IntegerLit(1)), BlockStmt([AssignStmt(Id(product), FuncCall(prod, [Id(product), ArrayCell(d, [Id(i)])]))]))])), CallStmt(printf, StringLit(The product of the elements of d is %.2f\n), Id(product)), VarDecl(result, IntegerType, FuncCall(sum, [Id(a), FuncCall(sum, [IntegerLit(3), IntegerLit(4)])])), CallStmt(printf, StringLit(The sum of a, 3, and 4 is %d\n), Id(result))]))
])