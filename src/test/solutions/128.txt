Program([
	FuncDecl(sum, AutoType, [Param(x, IntegerType), Param(y, IntegerType)], None, BlockStmt([ReturnStmt(BinExpr(+, Id(x), Id(y)))]))
	FuncDecl(prod, AutoType, [Param(x, FloatType), Param(y, FloatType)], None, BlockStmt([ReturnStmt(BinExpr(*, Id(x), Id(y)))]))
	FuncDecl(main, VoidType, [], None, BlockStmt([VarDecl(i, IntegerType, IntegerLit(0)), VarDecl(j, IntegerType, IntegerLit(0)), VarDecl(factorial, IntegerType, IntegerLit(1)), WhileStmt(BinExpr(<, Id(i), IntegerLit(5)), BlockStmt([AssignStmt(Id(i), BinExpr(+, Id(i), IntegerLit(1))), AssignStmt(Id(factorial), BinExpr(*, Id(factorial), Id(i)))])), CallStmt(printf, StringLit(The factorial of 5 is %d\n), Id(factorial)), VarDecl(num, IntegerType), DoWhileStmt(BinExpr(<=, Id(num), IntegerLit(0)), BlockStmt([CallStmt(printf, StringLit(Enter a positive number: )), CallStmt(scanf, StringLit(%d), Id(num))])), CallStmt(printf, StringLit(You entered %d, which is positive.\n), Id(num)), VarDecl(odd_sum, IntegerType, IntegerLit(0)), ForStmt(AssignStmt(Id(i), IntegerLit(1)), BinExpr(<=, Id(i), IntegerLit(100)), BinExpr(+, Id(i), IntegerLit(2)), BlockStmt([AssignStmt(Id(odd_sum), FuncCall(sum, [Id(odd_sum), Id(i)]))])), CallStmt(printf, StringLit(The sum of the odd numbers from 1 to 100 is %d\n), Id(odd_sum)), IfStmt(BinExpr(&&, BinExpr(>=, Id(b), FloatLit(2.0)), BinExpr(<=, Id(b), FloatLit(3.0))), BlockStmt([CallStmt(printf, StringLit(b is between 2.0 and 3.0, inclusive.\n))]), BlockStmt([CallStmt(printf, StringLit(b is not between 2.0 and 3.0, inclusive.\n))])), VarDecl(even_product, FloatType, FloatLit(1.0)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(2)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([ForStmt(AssignStmt(Id(j), IntegerLit(0)), BinExpr(<, Id(j), IntegerLit(3)), BinExpr(+, Id(j), IntegerLit(1)), BlockStmt([IfStmt(BinExpr(==, BinExpr(%, ArrayCell(d, [Id(i)]), IntegerLit(2)), IntegerLit(0)), BlockStmt([AssignStmt(Id(even_product), FuncCall(prod, [Id(even_product), ArrayCell(d, [Id(i)])]))]))]))])), CallStmt(printf, StringLit(The product of the even elements of d is %.2f\n), Id(even_product)), VarDecl(result, FloatType, FuncCall(sum, [Id(a), FuncCall(prod, [FloatLit(2.0), FloatLit(3.5)])])), CallStmt(printf, StringLit(The sum of a and the product of 2.0 and 3.5 is %.2f\n), Id(result))]))
])