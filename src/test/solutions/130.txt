Program([
	VarDecl(n, IntegerType, IntegerLit(100))
	VarDecl(sum, IntegerType, IntegerLit(0))
	VarDecl(prod, IntegerType, IntegerLit(1))
	VarDecl(count, IntegerType, IntegerLit(0))
	FuncDecl(is_prime, AutoType, [Param(x, IntegerType)], None, BlockStmt([IfStmt(BinExpr(<, Id(x), IntegerLit(2)), BlockStmt([ReturnStmt(BooleanLit(False))]), BlockStmt([ForStmt(AssignStmt(Id(i), IntegerLit(2)), BinExpr(<=, Id(i), BinExpr(/, Id(x), IntegerLit(2))), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([IfStmt(BinExpr(==, BinExpr(%, Id(x), Id(i)), IntegerLit(0)), BlockStmt([ReturnStmt(BooleanLit(False))]))])), ReturnStmt(BooleanLit(True))]))]))
	FuncDecl(factorial, AutoType, [Param(x, IntegerType)], None, BlockStmt([IfStmt(BinExpr(==, Id(x), IntegerLit(0)), BlockStmt([ReturnStmt(IntegerLit(1))]), BlockStmt([ReturnStmt(BinExpr(*, Id(x), FuncCall(factorial, [BinExpr(-, Id(x), IntegerLit(1))])))]))]))
	FuncDecl(main, VoidType, [], None, BlockStmt([VarDecl(i, IntegerType, IntegerLit(1)), WhileStmt(BinExpr(<=, Id(i), Id(n)), BlockStmt([AssignStmt(Id(sum), BinExpr(+, Id(sum), Id(i))), AssignStmt(Id(i), BinExpr(+, Id(i), IntegerLit(2)))])), CallStmt(printf, StringLit(The sum of the first %d odd integers is %d.\n), Id(n), Id(sum)), ForStmt(AssignStmt(Id(i), IntegerLit(2)), BinExpr(<, Id(count), Id(n)), BinExpr(+, Id(i), IntegerLit(2)), BlockStmt([IfStmt(BinExpr(!=, BinExpr(%, Id(i), IntegerLit(3)), IntegerLit(0)), BlockStmt([AssignStmt(Id(prod), BinExpr(*, Id(prod), Id(i))), AssignStmt(Id(count), BinExpr(+, Id(count), IntegerLit(1)))]))])), CallStmt(printf, StringLit(The product of the first %d even integers not divisible by 3 is %d.\n), Id(n), Id(prod)), VarDecl(p, IntegerType, BinExpr(/, FuncCall(factorial, [Id(n)]), BinExpr(*, FuncCall(factorial, [IntegerLit(2)]), FuncCall(factorial, [BinExpr(-, Id(n), IntegerLit(2))])))), VarDecl(q, IntegerType, BinExpr(*, IntegerLit(2), Id(n))), VarDecl(result, FloatType, BinExpr(/, BinExpr(*, Id(p), FuncCall(factorial, [BinExpr(-, Id(n), IntegerLit(2))])), Id(q))), CallStmt(printf, StringLit(The value of (n choose 2) * factorial(n - 2) / 2^n is %.2f.\n), Id(result)), IfStmt(FuncCall(is_prime, [Id(n)]), BlockStmt([CallStmt(printf, StringLit(%d is prime.\n), Id(n))]), BlockStmt([CallStmt(printf, StringLit(%d is not prime.\n), Id(n))]))]))
])