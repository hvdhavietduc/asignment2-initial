Program([
	FuncDecl(func1, AutoType, [Param(x, IntegerType), Param(y, IntegerType)], None, BlockStmt([VarDecl(z, IntegerType), AssignStmt(Id(z), BinExpr(*, BinExpr(+, Id(x), Id(y)), BinExpr(-, Id(x), Id(y)))), ReturnStmt(Id(z))]))
	FuncDecl(func2, AutoType, [Param(x, FloatType), Param(y, FloatType)], None, BlockStmt([VarDecl(z, FloatType), AssignStmt(Id(z), BinExpr(*, Id(x), Id(y))), ReturnStmt(Id(z))]))
	FuncDecl(main, VoidType, [], None, BlockStmt([VarDecl(result1, IntegerType), VarDecl(result2, FloatType), AssignStmt(Id(result1), FuncCall(func1, [Id(a), Id(c)])), AssignStmt(Id(result2), FuncCall(func2, [Id(b), Id(d)])), CallStmt(printf, StringLit(The result of func1 is %d\n), Id(result1)), CallStmt(printf, StringLit(The result of func2 is %.2f\n), Id(result2)), IfStmt(BinExpr(==, BinExpr(%, Id(result1), IntegerLit(2)), IntegerLit(0)), BlockStmt([CallStmt(printf, StringLit(The result of func1 is even.\n))]), BlockStmt([CallStmt(printf, StringLit(The result of func1 is odd.\n))])), IfStmt(BinExpr(&&, BinExpr(>, Id(result2), IntegerLit(5)), BinExpr(<, Id(result2), IntegerLit(10))), BlockStmt([CallStmt(printf, StringLit(The result of func2 is between 5 and 10.\n))]), BlockStmt([CallStmt(printf, StringLit(The result of func2 is not between 5 and 10.\n))])), VarDecl(i, IntegerType, IntegerLit(0)), WhileStmt(BinExpr(<, Id(i), IntegerLit(5)), BlockStmt([VarDecl(j, IntegerType, IntegerLit(0)), WhileStmt(BinExpr(<, Id(j), IntegerLit(5)), BlockStmt([IfStmt(BinExpr(&&, BinExpr(==, BinExpr(+, Id(i), Id(j)), Id(a)), BinExpr(==, BinExpr(*, Id(i), Id(j)), Id(c))), BlockStmt([CallStmt(printf, StringLit(Found solution: i = %d, j = %d\n), Id(i), Id(j)), BreakStmt()])), AssignStmt(Id(j), BinExpr(+, Id(j), IntegerLit(1)))])), AssignStmt(Id(i), BinExpr(+, Id(i), IntegerLit(1)))]))]))
])