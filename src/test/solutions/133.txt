Program([
	FuncDecl(fibonacci, AutoType, [Param(n, IntegerType)], None, BlockStmt([IfStmt(BinExpr(<, Id(n), IntegerLit(0)), BlockStmt([ReturnStmt(UnExpr(-, IntegerLit(1)))]), IfStmt(BinExpr(||, BinExpr(==, Id(n), IntegerLit(0)), BinExpr(==, Id(n), IntegerLit(1))), BlockStmt([ReturnStmt(Id(n))]), BlockStmt([ReturnStmt(BinExpr(+, FuncCall(fibonacci, [BinExpr(-, Id(n), IntegerLit(1))]), FuncCall(fibonacci, [BinExpr(-, Id(n), IntegerLit(2))])))])))]))
	FuncDecl(find_largest, AutoType, [Param(arr, ArrayType([10], IntegerType))], None, BlockStmt([VarDecl(largest, IntegerType, ArrayCell(arr, [IntegerLit(0)])), ForStmt(AssignStmt(Id(i), IntegerLit(1)), BinExpr(<, Id(i), IntegerLit(10)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([IfStmt(BinExpr(>, ArrayCell(arr, [Id(i)]), Id(largest)), BlockStmt([AssignStmt(Id(largest), ArrayCell(arr, [Id(i)]))]))])), ReturnStmt(Id(largest))]))
	FuncDecl(row_sum, AutoType, [Param(matrix, ArrayType([3, 3], IntegerType)), Param(row, IntegerType)], None, BlockStmt([VarDecl(sum, IntegerType, IntegerLit(0)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(3)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([AssignStmt(Id(sum), BinExpr(+, Id(sum), ArrayCell(matrix, [Id(row), Id(i)])))])), ReturnStmt(Id(sum))]))
	FuncDecl(main, VoidType, [], None, BlockStmt([VarDecl(fib_nums, ArrayType([10], IntegerType)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(10)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([AssignStmt(ArrayCell(fib_nums, [Id(i)]), FuncCall(fibonacci, [Id(i)]))])), VarDecl(matrix, ArrayType([3, 3], IntegerType)), VarDecl(largest_fib, IntegerType, FuncCall(find_largest, [Id(fib_nums)])), VarDecl(largest_sum, IntegerType, IntegerLit(0)), VarDecl(largest_sum_row, IntegerType, UnExpr(-, IntegerLit(1))), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(3)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([AssignStmt(Id(sum), FuncCall(row_sum, [Id(matrix), Id(i)])), IfStmt(BinExpr(>, Id(sum), Id(largest_sum)), BlockStmt([AssignStmt(Id(largest_sum), Id(sum)), AssignStmt(Id(largest_sum_row), Id(i))]))])), CallStmt(printf, StringLit(The largest Fibonacci number is %d.\n), Id(largest_fib)), CallStmt(printf, StringLit(The row with the largest sum in the matrix is row %d, with a sum of %d.\n), Id(largest_sum_row), Id(largest_sum))]))
])