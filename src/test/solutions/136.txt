Program([
	VarDecl(a, IntegerType, IntegerLit(2))
	VarDecl(b, IntegerType, IntegerLit(5))
	VarDecl(c, FloatType, FloatLit(3.14159))
	FuncDecl(func1, AutoType, [Param(x, IntegerType), Param(y, IntegerType)], None, BlockStmt([VarDecl(z, IntegerType), AssignStmt(Id(z), BinExpr(*, BinExpr(+, Id(x), Id(y)), BinExpr(-, Id(x), Id(y)))), ReturnStmt(Id(z))]))
	FuncDecl(func2, AutoType, [Param(x, FloatType), Param(y, FloatType), Param(z, FloatType)], None, BlockStmt([VarDecl(a, FloatType), VarDecl(b, FloatType), VarDecl(c, FloatType), AssignStmt(Id(a), BinExpr(*, BinExpr(*, Id(x), Id(y)), Id(z))), AssignStmt(Id(b), BinExpr(+, BinExpr(+, Id(x), Id(y)), Id(z))), AssignStmt(Id(c), BinExpr(/, Id(x), Id(y))), ReturnStmt(BinExpr(+, BinExpr(+, Id(a), Id(b)), Id(c)))]))
	FuncDecl(main, VoidType, [], None, BlockStmt([VarDecl(result1, IntegerType), VarDecl(result2, FloatType), AssignStmt(Id(result1), FuncCall(func1, [Id(a), Id(b)])), AssignStmt(Id(result2), FuncCall(func2, [Id(c), Id(result1), Id(c)])), IfStmt(BinExpr(&&, BinExpr(>, Id(result1), IntegerLit(10)), BinExpr(<, Id(result2), IntegerLit(100))), BlockStmt([CallStmt(printf, StringLit(Both results are within the desired range.))]), IfStmt(BinExpr(>, Id(result1), IntegerLit(10)), BlockStmt([CallStmt(printf, StringLit(The first result is within the desired range, but the second is not.))]), IfStmt(BinExpr(<, Id(result2), IntegerLit(100)), BlockStmt([CallStmt(printf, StringLit(The second result is within the desired range, but the first is not.))]), BlockStmt([CallStmt(printf, StringLit(Neither result is within the desired range.))])))), VarDecl(i, IntegerType, IntegerLit(0)), WhileStmt(BinExpr(<, Id(i), IntegerLit(5)), BlockStmt([VarDecl(j, IntegerType, Id(i)), WhileStmt(BinExpr(<, Id(j), IntegerLit(5)), BlockStmt([CallStmt(printf, StringLit(%d, %d\n), Id(i), Id(j)), AssignStmt(Id(j), BinExpr(+, Id(j), IntegerLit(1)))])), AssignStmt(Id(i), BinExpr(+, Id(i), IntegerLit(1)))]))]))
])